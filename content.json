{"pages":[],"posts":[{"title":"Codeforces-Edu-Round-Notes","text":"退役老狗的 codeforces 摸鱼记。准备做做 Educational Round，一场做个五六题，试图维护一下捉襟见肘的代码能力，同时也拯救一下跌破下限的智商。 Educational Codeforces Round 144 (Rated for Div. 2)A注意到当 \\( i \\) 大于 \\(30\\) 时，产生的效果与 \\(i\\) 从 \\(1\\) 开始相同，所以原串是有循环节的。 my-impl B结论：最多使用两个 * 。 做法： 0 个 * : \\(a\\) 和 \\(b\\) 相同。 1 个 * : 答案是 x* 或是 *x 的形式，只需要考虑 \\(a\\) 和 \\(b\\) 的首字母或是尾字母是否相同。 2 个 * : 答案是 *xy* 的形式，如果答案是 x*y* 或是 *x*y 的形式，则可以等价替换为 x* 或 *y ，同理，使用 3 个或以上 * 一定不优。只需要考虑 \\(a\\) 和 \\(b\\) 中是否有两个连续字母相同。 my-impl C眼瞎了，没看到取模。 首先做这个最大\\(size\\) ，很好做，直接将 \\(l\\) 不断乘 \\(2\\) 直到超过 \\(r\\) 就可以得到最大的 \\(size\\) ，记为 \\(n\\) 。 然后考虑方案数，首先枚举一个集合中最小的数 \\(x\\) ，那么需要满足 \\(l \\leq x, x\\prod_{i = 1}^{n}d_i \\leq r, \\forall d_i \\geq 2\\)，所有 \\(d_i\\) 的取法就是方案数。 可以设计递推计算这个方案数，设 \\(f(x, n)\\) 表示集合中最小的数为 \\(1\\)、当前集合中最大的数是 \\(x\\) 、集合大小为 \\(n\\) 的方案数，转移比较简单，那么此题答案就是： \\[ \\sum_{x = l}^{r}\\sum_{i = 1}^{\\lfloor \\frac{r}{i} \\rfloor} f(i, n) = \\sum_{x = l}^{r} g(\\lfloor \\frac{r}{x} \\rfloor, n)\\] 上式中，\\(g(\\ , n)\\) 是 \\(f(\\ , n)\\) 的前缀和。 整除分块，时间似乎刚刚好。 Tutorial 里面似乎有数学方法可以直接把这个方案数算出来。 my-impl D贪心。 可以将题目中的操作看做将所有 \\(a_i - x\\) ，然后选择 \\(k\\) 个位置 \\(+ 2x\\) 。 套路地将区间和拆成前缀和相减的形式，考虑枚举右端点对于答案的可能贡献。接下来按照 \\(x\\) 的正负讨论，如果 \\(x &gt; 0\\) ，那么希望尽可能将 \\(k\\) 个位置放在区间内，否则尽可能放在区间外。 需要把一点点细节全部都写对，老年人为了复习线段树没有选择更快的做法。 my-impl E写半天没写出来，最后抄的题解，qaq。 还是看 Tutorial 吧。🥹 my-impl 可能需要注意的是，当 multiset 为空的时候，*s.begin() 似乎是未定义行为，会返回一个奇妙的东西？","link":"/2023/03/17/Codeforces-Edu-Round-Notes/"},{"title":"FLA22部分作业","text":"22 年“形式语言与自动机”课程中的部分作业整理，以我喜欢做错 / 不会做的证明题为主。 Assignment 1Problem 7Prove or disprove the following statement: Every regular language has a regular proper subset. \\( A \\), \\( B \\) are two languages over alphabet \\( \\Sigma \\). If neither \\( A \\) or \\( B \\) is regular, then \\( A \\cup B \\) is also not regular. If \\( A \\) and \\( B \\) are not regular languages and \\( C \\) is a language such that \\( A \\subseteq C \\subseteq B \\), then \\( C \\) is not regular. An infinite regular language \\( L \\) can be splited into two infinite disjoint, nonempty, regular subsets \\( L_1, L_2 \\). (Hint: use the pumping lemma.) 1. 假考虑边界情况，如 \\(L(\\emptyset) = \\emptyset\\) ，它没有真子集。 以下结论都是正确的： 每个正则语言都有一个正则子集（自己） 每个非空正则语言都有一个正则真子集（空集） 能不能为每个非空正则语言找到一个正则真子集？能（见 4. ） 2. 假举一个反例，设 \\( \\Sigma = \\lbrace 0, 1 \\rbrace, A = \\lbrace 0^n1^n \\mid n \\in \\mathbb{N} \\rbrace, B = L(0^{*}1^{*}) - A \\) ，\\( A \\) 很显然不是正则语言，而 \\( L \\) 很显然是正则语言，关键在于证明 \\( B \\) 不是正则语言。 此处可以利用 正则语言在交（差）操作下的封闭性 ，由 \\( A \\cup B = L \\) （其实是 \\(B = L - A\\)）知，若 \\( B \\) 正则，因为 \\( L \\) 正则，则 \\( A \\) 为正则语言，与 \\( A \\) 非正则的性质矛盾，因此可得 \\( B \\) 非正则。 作业中并没有想到这一点，尝试利用了正则语言的泵引理，觉得有一点问题，但助教判定为正确，记录如下： 正则语言的泵引理 若 \\( B \\) 为正则语言，则存在正整数 \\(n\\) （称之为 \\(B\\) 的泵引理常数），\\( \\forall s \\in B, |s| \\geq n \\) ，则 \\( s \\) 可拆解为 \\(xyz\\) 的形式 （即 \\(s = xyz\\)），其中 \\( |xy| \\leq n, |y| &gt; 0, xy^iz \\in B (i \\in \\lbrace 0, 1, 2, 3, \\cdots \\rbrace )\\) 反证，假设 \\( B \\) 为正则语言，则有 \\( B \\) 对应的泵引理常数 \\( n \\) ，设 \\( s \\in B \\) ，且 \\( s \\) 有一段长度为 \\(n\\) 的 \\(0\\) 前缀，即 \\( s = 0^nw\\) ，依然将 \\(s\\) 表示为 \\(xyz\\) 的形式，可设 \\( y = 0^m(m &gt; 0)\\) ，则 \\( xyyz = 0^{n + m}w \\) ，构造 \\( w = 1^{n + m} \\) ，即可推出 \\( xyyz \\notin B\\) 。 这个证明与一般的利用泵引理证明某个语言不属于正则语言的过程的最大的不同就是 \\(s\\) 除前缀之外的 \\(w\\) 部分是最后“拼凑”上去的。但从另一个角度来讲，哪怕是对于 \\(0^n\\) ，也足以应用泵引理，也就是说 \\(m\\) 的大小确定，所以在这里姑且认为 \\(w\\) 是确定存在且能被确定构造出来的 。 解析里给了一个巧妙的构造：设 \\( A = \\lbrace 0^m1^n \\mid m \\geq n, m, n \\in \\mathbb{N} \\rbrace, B = \\lbrace 0^m1^n \\mid m \\leq n, m, n \\in \\mathbb{N} \\rbrace, A \\cup B = L(0^{*}1^{*})\\) 。 3. 假考虑 \\( \\Sigma = \\lbrace 0, 1, a, b \\rbrace, A = \\lbrace 0^n1^n \\mid n \\in \\mathbb{N} \\rbrace, C = \\lbrace 0^m1^n \\mid m, n \\in \\mathbb{N} \\rbrace , B = \\lbrace 0^m1^na^pb^p \\mid m, n, p \\in \\mathbb{N} \\rbrace \\) ，很显然 \\( A \\subseteq C \\subseteq B \\) ，\\( A \\) 不是正则语言，\\( C \\) 是正则语言，关键在于证明 \\( B \\) 不是正则语言（看上去就不是正则语言 qaq ）。 比较简便的做法是利用正则语言在同态下的封闭性，设同态函数 \\(h, h(0) = \\epsilon, h(1) = \\epsilon, h(a) = 0, h(b) = 1\\) ，则 \\(h(B) = A\\) （虽然在这里不重要但是这个写法对吗？），若 \\( B \\) 正则，则 \\( A \\) 必定正则，矛盾。所以 \\(B\\) 不是正则语言。 4. 真根据提示，考虑使用泵引理，可在 \\( L \\) 中任取 \\(w (|w| \\geq n)\\) ，设 \\(w = xyz\\) ，由 \\( xy^iz \\in B \\) 可以猜测出将两部分串按照 \\(i\\) 奇偶性分类。 在作业中，我取了 \\( L_1 = \\lbrace xy^{2i}z \\mid i \\in \\mathbb{N}, i \\geq 1 \\rbrace \\) ，又对称地取了 \\( L_2 = \\lbrace xy^{2i + 1}z \\mid i \\in \\mathbb{N} \\rbrace \\)，这里应该是没想清楚，因为 \\( L_1 \\cup L_2 \\neq L \\) 。 事实上，只需取 \\( L_1 = \\lbrace xy^{2i}z \\mid i \\in \\mathbb{N} \\rbrace \\) ，然后取 \\(L_2 = L - L_1\\) 即可。由正则语言在集合差操作下的封闭性可知，若能证明 \\(L_1\\) 是正则语言，则 \\(L_2\\) 也是正则语言。在作业中，我只是感觉 \\(L_1\\) 是正则语言非常显然，并没有证明，这里应当需要补充一个简单的证明。事实上可以使用正则表达式，\\( L_1 = L(x(yy)*z) \\) 。 现在可以回过头来看看 1. 中最后提出的那个问题：对于正则语言 \\(L\\) ，若 \\(|L| &gt; 1\\) ，则能否为 \\(L\\) 找到一个正则真子集？ 按照 \\(L\\) 是有限还是无限集讨论： 若 \\(L\\) 有限，则可按照字典序将 \\(L\\) 中的串排序，删去最后一个即可。 若 \\(L\\) 无限，直接使用上面的构造方式。 Problem 8(Bonus) For a language \\(L\\), let \\(A(L)\\) be the language \\(\\lbrace wv \\mid \\exist v \\in \\Sigma. vw \\in L \\rbrace\\). Show that if \\(L\\) is regular, so is \\(A(L)\\). For a language \\(L\\), let \\(B(L)\\) be the language \\(\\lbrace wv \\mid \\exist v \\in Sigma^{*}. vw \\in L \\rbrace\\). Show that if \\(L\\) is regular, so is \\(B(L)\\). 所以搞了半天似乎 Bonus 是没有加分的，意思是你做了题目自己获得了提升。笑死了，不过 Bonus 应该就没有做出来过。 这道题的核心思想是利用 \\(L\\) 对应的 DFA 构造 \\(\\epsilon\\)NFA，具体的细节以后有机会再详细写吧。 犯的一个错误是 2. 不能利用 1. 的结论（属于是初高中数学思维定式了），一个错解是这样的： \\( \\forall i \\in \\mathbb{N}, B_i(L) = \\lbrace wv \\mid \\exist v \\in \\Sigma^{i}. vw \\in L \\rbrace \\) \\( B_0(L) = L, B_1(L) = A(L), B_2(L) = A(B_i(L)), \\forall i \\in N, B_i(N) \\in \\text{RE by induction} \\) \\(B(L) = \\bigcup_{i = 0}^{\\infty} B_i(L) \\in \\text{RE(closed under union)} \\) 看上去很对，但是问题出在最后一步，正则语言在有限交下封闭，但是在无限交下不一定封闭，考虑一个反例： \\(L_i = \\lbrace 0^i1^i \\rbrace, \\forall i \\in \\mathbb{N}, L_i \\in \\text{RE}\\) \\(L = \\bigcup_{i = 0}^{\\infty} L_i = \\lbrace 0^n1^n \\mid n \\in \\mathbb{N} \\rbrace \\notin \\text{RE}\\) Assignment 2Problem 7For any contest-free language \\(L\\) and any regular language \\(R\\), answer each of the following statements True or False. If your answer is True, give an explanation. If your answer is False, give a counterexample. \\(L - R\\) is context-free. \\(R - L\\) is context-free. \\(S(L) = \\lbrace w \\mid \\exist v \\in \\Sigma^{*}. vw \\in L\\rbrace \\) . \\(S(L)\\) is context-free. (Bonus) \\(H(L) = \\lbrace w \\mid \\exist v \\in \\Sigma^{*}. vw \\in L \\land |v| = |w| \\rbrace\\). \\(H(L)\\) is context-free. (Hint: intersection with a regular language.) 1. True &amp;&amp; 2. False\\(L - R = L \\cap \\overline{R}\\) 。这里的 \\(\\overline{R}\\) 其实是针对语言的全集 \\(\\Sigma^{*}\\) 来说的，全集是一个正则语言，由正则语言在差操作下的封闭性知 \\(\\overline{R}\\) 也是一个正则语言；又由上下文无关语言与正则语言在交操作下的封闭性知 \\(L \\cap \\overline{R}\\) 也是一个上下文无关语言。 相似地，\\( R - L = R \\cap \\overline{L}\\) 。但上下文无关语言在集合差操作下不封闭，即 \\(\\overline{L}\\) 不一定是上下文无关语言。这里需要一个反例。考虑构造一个 \\(L(a^nb^nc^n)\\) 的典型的非上下文无关语言，可设 \\(R = L(a^{*}b^{*}c^{*}), L = \\lbrace a^ib^jc^k \\mid i \\neq j \\lor j \\neq k \\rbrace\\) ，关键在于证明 \\(L\\) 是上下文无关语言。 可以将 \\(L\\) 拆解为 \\(L_1 \\cup L_2\\) ，其中 \\(L_1 = \\lbrace a^ib^jc^k \\mid i \\neq j \\rbrace, L_2 = \\lbrace a^ib^jc^k \\mid j \\neq k \\rbrace \\)，由上下文无关语言在并操作下的封闭性可知 \\(L\\) 也是上下文无关语言。 有一个典型的错解是构造 \\(L\\) 和 \\(R\\) 的并行 PDA（PDA in parallel），然后标记 \\(L\\) 和 \\(R\\) 对应的结束状态，如在 1. 中将 \\([p, q] (p \\in F(L), q \\notin F(R))\\) 标记为接受状态。这样的做法在 1. 中是没问题的，但是在 2. 中不成立。 对于确定性的自动机，将所有的接受状态和非接受状态取反，得到的新自动机接受原语言的补集，但是这一点对于非确定性的自动机是不成立的。反例似乎遍地都是，比如我随手写了一个 \\(L(ab^{*} + c^{*})\\)。所以 \\(\\overline{L}\\) 的自动机不能很好地构造出来。 3. True构造一：构造上下文无关文法 Chomsky 范式 一个文法满足 Chomsky 范式，当且仅当所有产生式都满足以下三者之一。 \\( A \\to BC \\) \\( A \\to a \\) \\( S \\to \\epsilon \\) 对于 \\(L\\) 的一个满足 Chomsky 范式的 CFG \\(G = (V, T, P, S)\\) ，构造一个新的 CFG \\(G’ = (V’, T, P’, S’)\\) 使 \\(L(G’) = S(G)\\)。 \\(V’ = V \\cup {A’ \\mid A \\in V}\\) ，即将所有的非终结符都复制一份。 For each \\(A \\to a \\in P\\), add\\(A \\to a, A’ \\to \\epsilon | a\\) to P’. For each \\(A \\to BC \\in P\\), add \\(A \\to BC, A’ \\to B’C | C’\\) to P’. 对于 \\(G’\\) ，从 \\(S’\\) 开始推导，\\(A’\\) 会忽略前缀，而 \\(A\\) 则会保留所有的后缀，因此 \\(L(G’)\\) 中含有 \\(L\\) 中所有的后缀。 构造二：构造 PDA可以将状态 \\(Q\\) 复制两份 \\(Q_0, Q_1\\) ，其中 \\(Q_0\\) 的所有转移都使用 \\(\\epsilon\\)，用来忽略前缀 ，而 \\(Q_1\\) 的所有转移都保持不变，用来忽略后缀。\\(Q_0\\) 和 \\(Q_1\\) 的栈上的转移保持不变。并在 \\(Q_0\\) 和 \\(Q_1\\) 之间对应的节点使用 \\(\\epsilon\\) 边连起来，表示从忽略前缀到处理后缀的过程。 这个新的 PDA 其实是一个分层图，只能从 \\(Q_0\\) 所在的层“向上”走到 \\(Q_1\\) 所在的层，同时能够保留所有的栈状态以确保能够顺利接受。因此新 PDA 可以接受 \\(S(L)\\) 。 4. False构造反例，设 \\(L = \\lbrace a^{3n}b^{n}c^{m}d^{m} \\mid m, n \\in \\mathbb{N} \\rbrace\\) ，考虑 \\(L’ = H(L) \\cap R\\) ，其中 \\(R = L(b^{+}c^{*}d^{*})\\) ，则 \\(L’ = \\lbrace b^{p}c^{m}d^{m} \\mid 0 &lt; p \\leq m \\rbrace\\) 。 因为 \\(L\\) 是由两个上下文无关语言连接而成的，所以 \\(L\\) 也是上下文无关语言。在 \\(L’\\) 中 \\(0 &lt; p \\leq m\\) 的限制中，\\(0 &lt; p\\) 来源于 \\(b^{+}\\) ，而 \\(p \\leq m\\) 则是来源于正则表达式中不包含 \\(a\\) 的要求，若 \\(p &gt; m\\) ，则 \\(H(L)\\) 中一定包含 \\(a\\) ，与 \\(R\\) 交完之后不可能出现这种串。 那么这个 \\(L’\\) 里面有两个限制，看上去就不是上下文无关语言，又根据上下文无关语言和正则语言的交是上下文无关语言，若 \\(H(L)\\) 是上下文无关语言，则 \\(H(L) \\cap R\\) 也一定是上下文无关语言。若能证明 \\(L’\\) 不是上下文无关语言，则 \\(H(L)\\) 就不是上下文无关语言，反例构造成立。 可以使用上下文无关语言的泵引理很方便地证明。 上下文无关语言的泵引理 若 \\(L\\) 为上下文无关语言，则存在泵引理常数 \\(n\\) ，\\(\\forall z \\in L, |z| \\geq n\\) ，可以将 \\(z\\) 拆分为 \\(uvwxy\\) ，即 \\(z = uvwxy\\) ，其中 \\(|vwx| \\leq n, |vx| \\geq 1\\) ，\\(\\forall k \\in \\lbrace 0, 1, 2, \\ldots \\rbrace\\)， \\(uv^{k}wx^{k}y \\in L\\) 。 在做题的过程中，发现了一件比较有意思看上去也比较有用的事情，就是在泵引理的应用过程中，可以不妨设 \\(|u| &lt; n \\)。因为若 \\(|u| \\geq n\\) ，可以直接对 \\(u\\) （不断）应用泵引理直到 \\(|u| &lt; n\\) 。 那么对于 \\(L’\\) ，可以直接取 \\(z = b^{2n}c^{2n}d^{2n} = uvwxy \\) ，不妨设 \\(|u| &lt; n\\)，那么 \\(v, x\\) 都是一段 \\(b\\) ，设 \\(|vx| = l\\) ，取 \\(k = n\\)，则 \\(uv^kwx^ky = b^{2n + ln}c^{2n}d^{2n} \\notin L’\\) ，因此 \\(L’\\) 不是上下文无关语言。","link":"/2023/01/26/FLA22%E9%83%A8%E5%88%86%E4%BD%9C%E4%B8%9A/"},{"title":"Hello World","text":"10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c6da7dc8584583c53132d123565a83bc482d57efe09dbb13f6be1ebadf67b396c5e9af14ae37a94b87d779719bc8c1cd1a95420a6d53586101970b6bd1e11383c5fb9eb6a2afd2dfd764940c736e232c31819ba63da4a7c6eb6c1003cc6443dcf2082b9f749ca03a1484b87b08c908b3c310d7b631064a7fc3f9ca36177e4c3059978875c3caa78a7dceb6037a9522caf5c4adf858dd97440561f76a5ba5e4fd77e9898dfeb4cad54c4bb643f9c0ecbaef49a3431bdd2455830a88255232397afbbe9b23eb9395dfae6f0824e03416bc0b3804386abdc6c923976a913424fdbf1ba89bde972822239ac5e9109f398b65ae65ef00629508a203d30649f6408e1f61f5f6e73d99349907d745bd4c4ef0763621826913a2677273e3b66ae19439d1940d9ebcc45d324738506f0ac5dca5093adf45b82a24da2d49432e9f7cea3b56d73ea8b80628014008c75e6df0aa070ccdaa53907f1adc5e6234b2ab2f7f8485fb9383dc64927d631e20713c7d719815e20c9d6247aa120998e681a19e43d40ca49e20ce7419d535072ff85e74c96caabe848f11f049126a6f4cbbfc746a3cae3d4b6c98db711e8b3bdbd372def67e3d1bf776ee35037a2377d5898704789976ec22fc47c64eb83da5766f0408afee5b438701c6084a1025c673100e7ac0cf710407782790b56679a3fbb40313022e90f715c1a39914fe4b710beb621310bee163ece727a9d02da8b2ef0925acbeedbed1bdf2fb2a5a106956f607dcb5fcef0e36a97afa6fe5d415be51d647cc196fec6186575845eba2577edf79b237f40501d9e0516fe26fcc18e5bb029218ceea51ed6571ed6499c1b863fe5e4184373aee7af54e687aecc3ffa4986afe90e3a5fd67d73f47c0c882443054fed1625259e96370f07d55431f1a03130d5486c9ac1bc2c51d48a7b31ca8c81fdd6cc8795e3296ee5cc4dd66f3e582583d5516a299f41c5bc32710ee392ddb18d02b9fea50df38fbea6579d1f8a7a1ec2fdcff1a546b8a51d96657a2c6538c2dc93476d69467cb3671b880c09d3c422cfb3bb9199050f0c77a137b4b0dbdb4041a1be97361f0b783b6ab8bbbdcfdf1c9d545e17a129eca1e4cc3aabe88b7ab633ec35eacbb26e1b4b8c0876bd6ed5f351cc4d04c974e55a4f37f0580b599953ae28a9a6f6ea344c8bee255996315fa0673b087d06f292b6f9e84801a38c8ffea05fecb03b16577db7697bbac072e1d372bf5fb0dfd48bdb369ba8ac97c5f3f8b3173cbee017a98e2eea5f78edd3ad8ae87ff061a3e43ccbb435291c501139a80744cf59040e4b980306c75cfb527b82fe4c578a8973a6a75baeb2be249b344f14cd6153f99e07309fee10b0e8e4702ded0dbde9bcc5b0eb0d117b479db98f93d36f1c8721a712a9650023572dd95effb7718f45c2948d9192a1d27b38e652903d68992618f4c9feee5c5dfc2fcb15fbf1d3fd5896245a14bc1bdabb6dddb4db0ea3fc36165bbc4b56ffbbb0ed570e77f7d8820a5078d5fe499945473ff216f85fe92c706d7aa308198dfcd4d85abe4f1fcb8924d6b5c72b05a03333c163fedfef1f479daeff26a1d99802645980fefa0f8be445851c3f508e0b5ee79b06b504a054b4e7ad26f9d0344d2395322d452565b03020d13fe150bbc9ca3e433e04e3411da56239b42807d0090d11b5858ff8487212fb6771f4914fdcd8393d2cd2150eb82d8e82be0db2e71679f2f78d5b22b32a305993748f09821838303b75df669acf24e08c3eab2fe0433662a1056cc392ccecc20041dbf44a229ada35bed43255979bfd7e150b6e812c6c23466dd45e57c5b443d976b298b5f5e4d977130bcaf5ec26e2e2c727886f3f116fd1fbad331bbf9d1ca9efa141a0174450b00f818e2b59a784a40b77918ba82e75a31bd542e611a43010f08fc30369e93386f239e5fb9a515d6c2afc272997890c0ec4619f78f4b5fed881f0002b85e8165088649391e0249613310e523cdf5e2dfd5d4b4236bf38c02fb72341cfe539508f7af5c7db00d07b8425db13d92aa628930b5521eba6daf54fce1a8a6a36e1b095f67ebadd2fb0c096012eee795a471f33f501a0fef0a9075dfce83a3227087b12382ff22011db6d7fc3cc877c19d425b5b672b574f4df7643bee516ecdc66629c21963733bea688bc205c9add0c36479130ca3eee5dc72698d00713bf52775cba1634cf4cdb9d5856c60135524af408c949847e6cce9729997a3858154a3cf638ec1f1d326b3caa59b6a3555f947a761998b37a3890339d86cf8eaaf75260de0475d5ba017d78d7e2671849c4f8924658a4fa3a6bb478e5dde99ccb965fc5f099418feda6e45cb85e810e253d8da0ec932b4f426793cb86b882291a6d98f048b162b71dd6888262a0e3d96caa0538f96845e3bddee62faf30f9b8e3176953e68652ed0b429f284bbd828de3d2c4815b2b69cd2f5cd993b1bcf65d2c8b67f3a5cc99dab9d029d01f9730eccf97c48dcfefbd9c3589bee7e98ebc76468ce1e4d47c4a4c89e275bb743892c4b8558d8ea957afa93b5ce2bd02f94ee38eb9fdcddcb8231584cc840b914a3eefe46c659029555aa0c43e523b507722c6753aa625f67b07ade89ad34eabd449f4c1d2822e0a0f435ce2602c2f5427dabec0f8cee68c5d64d9685cfc8e367505320dff6026c07f62ddb32c3039fe867067bcac7347b455893575e795974c91cd2b13bfe2341efd7b5e24b81aac898e60bb569def27c91bd3554bcf25d039002a7541daf01684f1aa4e4eb493a7ef9d3ab8c8489f98da8bf72989e524f97268729a6f437727d3354db4d2e5890f9b70fe2daa36cfbba178ccb0ead684e862eacb694e5c22f388c7d8b1f360f0459117529cf67e806255f61f71f840674c20c1b6c9b0ba4072bb7b1e19abec986c902fa25e735c93371dfb51ec15e9a2440cf886f29bc4e911d7c8925922efbc893b336161da60f33600143637d99e132a76da2087f75934b4997351f5e29ce8da8b847b61959afe5e9c612a2cc64730cf8dcb02cd15002ed3ec0088023a12023dcab79efe9d7f1f1d222b1193c79f0bab1a8e6a2d043a1eb296dd78659c4e81604579c8c6bac48d40d0852e0576b278b4736d1d223551b6182615643386d7db5f7c2f7260e76f13a018c7dcf9ddaf61b370b442078e879cf2adf819b779638149410a67b7452075e14c086c81c0b2a041464a65acac962f5a740fc7793937bd7de8e9b406f613494ca3792379f5b0775c34361320271c247c16191d4cecdacba56701e718305ade175c1370fa202c636e4092e80007c56aef865a4d163a494c42f6485ac8a1b1e099ee62d92ebd2159329274bc2ce46316821d1f95cd776d72f1d6e1632538c28a25d4ac2bee366f82e50357e064b5b38891a1b598a6c7cbfda523e60151596357104cbf7aeff3d590093a71e51f Hey, password is required here.","link":"/2022/03/20/hello-world/"}],"tags":[{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"}],"categories":[]}
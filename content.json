{"pages":[],"posts":[{"title":"Hello World","text":"10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c6da7dc8584583c53132d123565a83bc482d57efe09dbb13f6be1ebadf67b396c5e9af14ae37a94b87d779719bc8c1cd1a95420a6d53586101970b6bd1e11383c5fb9eb6a2afd2dfd764940c736e232c31819ba63da4a7c6eb6c1003cc6443dcf2082b9f749ca03a1484b87b08c908b3c310d7b631064a7fc3f9ca36177e4c3059978875c3caa78a7dceb6037a9522caf5c4adf858dd97440561f76a5ba5e4fd77e9898dfeb4cad54c4bb643f9c0ecbaef49a3431bdd2455830a88255232397afbbe9b23eb9395dfae6f0824e03416bc0b3804386abdc6c923976a913424fdbf1ba89bde972822239ac5e9109f398b65ae65ef00629508a203d30649f6408e1f61f5f6e73d99349907d745bd4c4ef0763621826913a2677273e3b66ae19439d1940d9ebcc45d324738506f0ac5dca5093adf45b82a24da2d49432e9f7cea3b56d73ea8b80628014008c75e6df0aa070ccdaa53907f1adc5e6234b2ab2f7f8485fb9383dc64927d631e20713c7d719815e20c9d6247aa120998e681a19e43d40ca49e20ce7419d535072ff85e74c96caabe848f11f049126a6f4cbbfc746a3cae3d4b6c98db711e8b3bdbd372def67e3d1bf776ee35037a2377d5898704789976ec22fc47c64eb83da5766f0408afee5b438701c6084a1025c673100e7ac0cf710407782790b56679a3fbb40313022e90f715c1a39914fe4b710beb621310bee163ece727a9d02da8b2ef0925acbeedbed1bdf2fb2a5a106956f607dcb5fcef0e36a97afa6fe5d415be51d647cc196fec6186575845eba2577edf79b237f40501d9e0516fe26fcc18e5bb029218ceea51ed6571ed6499c1b863fe5e4184373aee7af54e687aecc3ffa4986afe90e3a5fd67d73f47c0c882443054fed1625259e96370f07d55431f1a03130d5486c9ac1bc2c51d48a7b31ca8c81fdd6cc8795e3296ee5cc4dd66f3e582583d5516a299f41c5bc32710ee392ddb18d02b9fea50df38fbea6579d1f8a7a1ec2fdcff1a546b8a51d96657a2c6538c2dc93476d69467cb3671b880c09d3c422cfb3bb9199050f0c77a137b4b0dbdb4041a1be97361f0b783b6ab8bbbdcfdf1c9d545e17a129eca1e4cc3aabe88b7ab633ec35eacbb26e1b4b8c0876bd6ed5f351cc4d04c974e55a4f37f0580b599953ae28a9a6f6ea344c8bee255996315fa0673b087d06f29267c2341cef91ba205984a76fa62dda01c092d81e142ad2ac4d98b7b8188538bbc44495c0e3d89ac4878544c79924f8acb4adc6a3b210cf6fa4d29e74e9ba01316d1b72ea5bc99774e4b2333d360fd646ed503baeda794b55773c8788210f53e9fa71d7c9fbc878bd96ab63fcf108d82ff6eae477f451fbe5af82220060e1de2f785a433ad6ec536721794e313eb9670876a8fa17555fe3266884423e058615935fec5c585b27830640cce7635c5b4e85d83bf5c661e21f8aa813f00ae41d3115e4dc09d42e63535510e3ed8d34b4f0f531acfb941bdd6b5dad1c88a92377d58fe2fc1f5788286fcb9c4130f400ca5479211d019c2f1d880ddb0b41c0fb12e4d332e7034a1043c6325bb1309cc00d8b98aad8133d1d348f49d3520ba747416b0ca84c1d3896b79c679124268d835144b8a4efcfba3fc78d55abb0b80591f76c197d14ade2bb67668e132dad95005899a9679d48f54bd2c41597c0af0764e8a74e775f93f26ab37b7a09227ca6ef02860b13dad721013b5219eac566b041a1ba118e583ae70e66f5a52ee2626f4b6e14529cd745c57de18039834fb78bbf78452c4d5b73c1ffa092afa9cc5513eda79fe4e0de6a5d5569576e0434ff576e0cf5377e230fc63c98e869c77c9faeddafc68609588b177ed8404b9f01de55b0b746dfabb3e3b93e7af30dff3c34d44c7eb73f691cdd7a571295050864c44ff8fa28c7b7cd4943294dbc13b7631957569f3106629a8b4dd86cbfc117cdeae406a2a5c422b387e1ca8d09312dc0c514353b32ee19418d709ecec149c7505c34efd924781069f7e87a55af2d9e5b38e453a27734c4e344a4b893116eb61cdd8ee62d9eb323d48be54b09e10d1a930081bc6bdf5a703cd12466dcfbbc06615b2452744560dbd4ae43b0c0e399be61c90259865879f2b8d9d51650aeb3a0e4ec8ee03dbcddb0b9ecaf9e91d1ee3ca64478c75d97e84470c904606303e77898683ba744def92dc3922939b2779044fcc453c680eeba7edaf6fd4a6024b42ab48b2ad65af3dbf47a7ab36151805821b123703199512244347d2edba4065642f527f6e43e73d75e770b53a983e832c4e1f6a402d4e232a4e7227962ccd12879f4bdbc007e55bf186a3746dc6c88b3c71e32b54b593da056505c11475cac19e3e4eb2c771074db664485d12df81e8b31c16669283bfe3b23cfa4a540aa1f3f7ef40a0fdb879046951da4d1bee75b89a0a1d9e6e073c1a55b3f7b94bb7d9882d882124c88e948d7b792a58ad94367bd6dd5d58c2ec4b53a05b74b952c9f3188cba67eb51a34ed09ce7d46514a4b53354da3b1af9ffc249a69eabfeefb2825653bbf9d2ec06d2169f568beb24473602d96a3d6b15e846a82db32fe7b095f69b881f5d16bf18837d18891a3930061addddc1cc7ca06d1601c5390575d3f3dec2ac925712b207d29276780d3537cabd814764296ad4db72c38a25d4567f0ef7d9ae6332c49240cf0cac7c198cdcfcdb7d912027d6c67fd92c14ba3f017b8cb9f3d06cc9c85cb679f4d460064679e60393931464944f3b7bced2f6b105264e36c9b71853f98a11db94c8ad067ba7293b35cd93c3714902fc121d9931bf4387c219d319e061bea8a2339de08539ef4d6f1558eb3ff3b8a48fada8c85c0488bd740cc4b001f107c4b9fb17953e39e396f7e904fd86f6c9243547a16ef8ab8d2465c827e36cc25d79a411481d32fe96ebfc6a61d671722698a6afd892791394d751ecc96c222ae8b889850ce66bd070fada3901ba7fd26e20f1da9e7ecacc853f8fa5206776f4069c855a6993f525ee5ae2a57de782eceabfcfc27e76f1a36de24112b5bf7d5763ef02a88a83e939fffcff45b57a18abaccdec785e2d026a47e02cbbfd6031b03ee43c9b66bae89e8ecc1c0b480227dac702dadf178714bf99ce73a71c5e4cb388c9e6715fce80239a0bede4a3862d53cc6b39058073a09b8a9c189cd69b2ba8af3470eb5894fbc3bf79f165b0fdb59b38d4f3de2eed2d45ac059f3a1c56b618b496e0dc68b1ff1aac3cc9603bbbca50d966f2499939ea9325336b85c56c4d8a0ffc23750875e28062579fd16a76616237fa2074c82fd06423d7f7b4b74bfacd4946d3fb9aeac916fd4195a1f2e749c5161edb4e31cdbd19c4c4d3679cd14620052947308227bfe331eefdb3fd27a48532c9e2d7a566b88ef6a388b6f4e7b982e2dbc775bcff7ae5a814ad11c9bf6b375d035441b Hey, password is required here.","link":"/2022/03/20/hello-world/"},{"title":"FLA22部分作业","text":"22 年“形式语言与自动机”课程中的部分作业整理，以我喜欢做错 / 不会做的证明题为主。 Assignment 1Problem 7Prove or disprove the following statement: Every regular language has a regular proper subset. \\( A \\), \\( B \\) are two languages over alphabet \\( \\Sigma \\). If neither \\( A \\) or \\( B \\) is regular, then \\( A \\cup B \\) is also not regular. If \\( A \\) and \\( B \\) are not regular languages and \\( C \\) is a language such that \\( A \\subseteq C \\subseteq B \\), then \\( C \\) is not regular. An infinite regular language \\( L \\) can be splited into two infinite disjoint, nonempty, regular subsets \\( L_1, L_2 \\). (Hint: use the pumping lemma.) 1. 假考虑边界情况，如 \\(L(\\emptyset) = \\emptyset\\) ，它没有真子集。 以下结论都是正确的： 每个正则语言都有一个正则子集（自己） 每个非空正则语言都有一个正则真子集（空集） 能不能为每个非空正则语言找到一个正则真子集？能（见 4. ） 2. 假举一个反例，设 \\( \\Sigma = \\lbrace 0, 1 \\rbrace, A = \\lbrace 0^n1^n \\mid n \\in \\mathbb{N} \\rbrace, B = L(0^{*}1^{*}) - A \\) ，\\( A \\) 很显然不是正则语言，而 \\( L \\) 很显然是正则语言，关键在于证明 \\( B \\) 不是正则语言。 此处可以利用 正则语言在交（差）操作下的封闭性 ，由 \\( A \\cup B = L \\) （其实是 \\(B = L - A\\)）知，若 \\( B \\) 正则，因为 \\( L \\) 正则，则 \\( A \\) 为正则语言，与 \\( A \\) 非正则的性质矛盾，因此可得 \\( B \\) 非正则。 作业中并没有想到这一点，尝试利用了正则语言的泵引理，觉得有一点问题，但助教判定为正确，记录如下： 正则语言的泵引理若 \\( B \\) 为正则语言，则存在正整数 \\(n\\) （称之为 \\(B\\) 的泵引理常数），\\( \\forall s \\in B, |s| \\geq n \\) ，则 \\( s \\) 可拆解为 \\(xyz\\) 的形式 （即 \\(s = xyz\\)），其中 \\( |xy| \\leq n, |y| &gt; 0, xy^iz \\in B (i \\in \\lbrace 0, 1, 2, 3, \\cdots \\rbrace )\\) 反证，假设 \\( B \\) 为正则语言，则有 \\( B \\) 对应的泵引理常数 \\( n \\) ，设 \\( s \\in B \\) ，且 \\( s \\) 有一段长度为 \\(n\\) 的 \\(0\\) 前缀，即 \\( s = 0^nw\\) ，依然将 \\(s\\) 表示为 \\(xyz\\) 的形式，可设 \\( y = 0^m(m &gt; 0)\\) ，则 \\( xyyz = 0^{n + m}w \\) ，构造 \\( w = 1^{n + m} \\) ，即可推出 \\( xyyz \\notin B\\) 。 这个证明与一般的利用泵引理证明某个语言不属于正则语言的过程的最大的不同就是 \\(s\\) 除前缀之外的 \\(w\\) 部分是最后“拼凑”上去的。但从另一个角度来讲，哪怕是对于 \\(0^n\\) ，也足以应用泵引理，也就是说 \\(m\\) 的大小确定，所以在这里姑且认为 \\(w\\) 是确定存在且能被确定构造出来的 。 解析里给了一个巧妙的构造：设 \\( A = \\lbrace 0^m1^n \\mid m \\geq n, m, n \\in \\mathbb{N} \\rbrace, B = \\lbrace 0^m1^n \\mid m \\leq n, m, n \\in \\mathbb{N} \\rbrace, A \\cup B = L(0^{*}1^{*})\\) 。 3. 假考虑 \\( \\Sigma = \\lbrace 0, 1, a, b \\rbrace, A = \\lbrace 0^n1^n \\mid n \\in \\mathbb{N} \\rbrace, C = \\lbrace 0^m1^n \\mid m, n \\in \\mathbb{N} \\rbrace , B = \\lbrace 0^m1^na^pb^p \\mid m, n, p \\in \\mathbb{N} \\rbrace \\) ，很显然 \\( A \\subseteq C \\subseteq B \\) ，\\( A \\) 不是正则语言，\\( C \\) 是正则语言，关键在于证明 \\( B \\) 不是正则语言（看上去就不是正则语言 qaq ）。 比较简便的做法是利用正则语言在同态下的封闭性，设同态函数 \\(h, h(0) = \\epsilon, h(1) = \\epsilon, h(a) = 0, h(b) = 1\\) ，则 \\(h(B) = A\\) （虽然在这里不重要但是这个写法对吗？），若 \\( B \\) 正则，则 \\( A \\) 必定正则，矛盾。所以 \\(B\\) 不是正则语言。 4. 真根据提示，考虑使用泵引理，可在 \\( L \\) 中任取 \\(w (|w| \\geq n)\\) ，设 \\(w = xyz\\) ，由 \\( xy^iz \\in B \\) 可以猜测出将两部分串按照 \\(i\\) 奇偶性分类。 在作业中，我取了 \\( L_1 = \\lbrace xy^{2i}z \\mid i \\in \\mathbb{N}, i \\geq 1 \\rbrace \\) ，又对称地取了 \\( L_2 = \\lbrace xy^{2i + 1}z \\mid i \\in \\mathbb{N} \\rbrace \\)，这里应该是没想清楚，因为 \\( L_1 \\cup L_2 \\neq L \\) 。 事实上，只需取 \\( L_1 = \\lbrace xy^{2i}z \\mid i \\in \\mathbb{N} \\rbrace \\) ，然后取 \\(L_2 = L - L_1\\) 即可。由正则语言在集合差操作下的封闭性可知，若能证明 \\(L_1\\) 是正则语言，则 \\(L_2\\) 也是正则语言。在作业中，我只是感觉 \\(L_1\\) 是正则语言非常显然，并没有证明，这里应当需要补充一个简单的证明。事实上可以使用正则表达式，\\( L_1 = L(x(yy)*z) \\) 。 现在可以回过头来看看 1. 中最后提出的那个问题：对于正则语言 \\(L\\) ，若 \\(|L| &gt; 1\\) ，则能否为 \\(L\\) 找到一个正则真子集？ 按照 \\(L\\) 是有限还是无限集讨论： 若 \\(L\\) 有限，则可按照字典序将 \\(L\\) 中的串排序，删去最后一个即可。 若 \\(L\\) 无限，直接使用上面的构造方式。 Problem 8(Bonus) For a language \\(L\\), let \\(A(L)\\) be the language \\(\\lbrace wv \\mid \\exist v \\in \\Sigma. vw \\in L \\rbrace\\). Show that if \\(L\\) is regular, so is \\(A(L)\\). For a language \\(L\\), let \\(B(L)\\) be the language \\(\\lbrace wv \\mid \\exist v \\in Sigma^{*}. vw \\in L \\rbrace\\). Show that if \\(L\\) is regular, so is \\(B(L)\\). 所以搞了半天似乎 Bonus 是没有加分的，意思是你做了题目自己获得了提升。笑死了，不过 Bonus 应该就没有做出来过。 这道题的核心思想是利用 \\(L\\) 对应的 DFA 构造 \\(\\epsilon\\)NFA，具体的细节以后有机会再详细写吧。 犯的一个错误是 2. 不能利用 1. 的结论（属于是初高中数学思维定式了），一个错解是这样的： \\( \\forall i \\in \\mathbb{N}, B_i(L) = \\lbrace wv \\mid \\exist v \\in \\Sigma^{i}. vw \\in L \\rbrace \\) \\( B_0(L) = L, B_1(L) = A(L), B_2(L) = A(B_i(L)), \\forall i \\in N, B_i(N) \\in \\text{RE by induction} \\) \\(B(L) = \\bigcup_{i = 0}^{\\infty} B_i(L) \\in \\text{RE(closed under union)} \\) 看上去很对，但是问题出在最后一步，正则语言在有限交下封闭，但是在无限交下不一定封闭，考虑一个反例： \\(L_i = \\lbrace 0^i1^i \\rbrace, \\forall i \\in \\mathbb{N}, L_i \\in \\text{RE}\\) \\(L = \\bigcup_{i = 0}^{\\infty} L_i = \\lbrace 0^n1^n \\mid n \\in \\mathbb{N} \\rbrace \\notin \\text{RE}\\) Assignment 2Problem 7For any contest-free language \\(L\\) and any regular language \\(R\\), answer each of the following statements True or False. If your answer is True, give an explanation. If your answer is False, give a counterexample. \\(L - R\\) is context-free. \\(R - L\\) is context-free. \\(S(L) = \\lbrace w \\mid \\exist v \\in \\Sigma^{*}. vw \\in L\\rbrace \\) . \\(S(L)\\) is context-free. (Bonus) \\(H(L) = \\lbrace w \\mid \\exist v \\in \\Sigma^{*}. vw \\in L \\land |v| = |w| \\rbrace\\). \\(H(L)\\) is context-free. (Hint: intersection with a regular language.) 1. True &amp;&amp; 2. False\\(L - R = L \\cap \\overline{R}\\) 。这里的 \\(\\overline{R}\\) 其实是针对语言的全集 \\(\\Sigma^{*}\\) 来说的，全集是一个正则语言，由正则语言在差操作下的封闭性知 \\(\\overline{R}\\) 也是一个正则语言；又由上下文无关语言与正则语言在交操作下的封闭性知 \\(L \\cap \\overline{R}\\) 也是一个上下文无关语言。 相似地，\\( R - L = R \\cap \\overline{L}\\) 。但上下文无关语言在集合差操作下不封闭，即 \\(\\overline{L}\\) 不一定是上下文无关语言。这里需要一个反例。考虑构造一个 \\(L(a^nb^nc^n)\\) 的典型的非上下文无关语言，可设 \\(R = L(a^{*}b^{*}c^{*}), L = \\lbrace a^ib^jc^k \\mid i \\neq j \\lor j \\neq k \\rbrace\\) ，关键在于证明 \\(L\\) 是上下文无关语言。 可以将 \\(L\\) 拆解为 \\(L_1 \\cup L_2\\) ，其中 \\(L_1 = \\lbrace a^ib^jc^k \\mid i \\neq j \\rbrace, L_2 = \\lbrace a^ib^jc^k \\mid j \\neq k \\rbrace \\)，由上下文无关语言在并操作下的封闭性可知 \\(L\\) 也是上下文无关语言。 有一个典型的错解是构造 \\(L\\) 和 \\(R\\) 的并行 PDA（PDA in parallel），然后标记 \\(L\\) 和 \\(R\\) 对应的结束状态，如在 1. 中将 \\([p, q] (p \\in F(L), q \\notin F(R))\\) 标记为接受状态。这样的做法在 1. 中是没问题的，但是在 2. 中不成立。 对于确定性的自动机，将所有的接受状态和非接受状态取反，得到的新自动机接受原语言的补集，但是这一点对于非确定性的自动机是不成立的。反例似乎遍地都是，比如我随手写了一个 \\(L(ab^{*} + c^{*})\\)。所以 \\(\\overline{L}\\) 的自动机不能很好地构造出来。 3. True构造一：构造上下文无关文法 Chomsky 范式一个文法满足 Chomsky 范式，当且仅当所有产生式都满足以下三者之一。 \\( A \\to BC \\) \\( A \\to a \\) \\( S \\to \\epsilon \\) 对于 \\(L\\) 的一个满足 Chomsky 范式的 CFG \\(G = (V, T, P, S)\\) ，构造一个新的 CFG \\(G’ = (V’, T, P’, S’)\\) 使 \\(L(G’) = S(G)\\)。 \\(V’ = V \\cup {A’ \\mid A \\in V}\\) ，即将所有的非终结符都复制一份。 For each \\(A \\to a \\in P\\), add\\(A \\to a, A’ \\to \\epsilon | a\\) to P’. For each \\(A \\to BC \\in P\\), add \\(A \\to BC, A’ \\to B’C | C’\\) to P’. 对于 \\(G’\\) ，从 \\(S’\\) 开始推导，\\(A’\\) 会忽略前缀，而 \\(A\\) 则会保留所有的后缀，因此 \\(L(G’)\\) 中含有 \\(L\\) 中所有的后缀。 构造二：构造 PDA可以将状态 \\(Q\\) 复制两份 \\(Q_0, Q_1\\) ，其中 \\(Q_0\\) 的所有转移都使用 \\(\\epsilon\\)，用来忽略前缀 ，而 \\(Q_1\\) 的所有转移都保持不变，用来忽略后缀。\\(Q_0\\) 和 \\(Q_1\\) 的栈上的转移保持不变。并在 \\(Q_0\\) 和 \\(Q_1\\) 之间对应的节点使用 \\(\\epsilon\\) 边连起来，表示从忽略前缀到处理后缀的过程。 这个新的 PDA 其实是一个分层图，只能从 \\(Q_0\\) 所在的层“向上”走到 \\(Q_1\\) 所在的层，同时能够保留所有的栈状态以确保能够顺利接受。因此新 PDA 可以接受 \\(S(L)\\) 。 4. False构造反例，设 \\(L = \\lbrace a^{3n}b^{n}c^{m}d^{m} \\mid m, n \\in \\mathbb{N} \\rbrace\\) ，考虑 \\(L’ = H(L) \\cap R\\) ，其中 \\(R = L(b^{+}c^{*}d^{*})\\) ，则 \\(L’ = \\lbrace b^{p}c^{m}d^{m} \\mid 0 &lt; p \\leq m \\rbrace\\) 。 因为 \\(L\\) 是由两个上下文无关语言连接而成的，所以 \\(L\\) 也是上下文无关语言。在 \\(L’\\) 中 \\(0 &lt; p \\leq m\\) 的限制中，\\(0 &lt; p\\) 来源于 \\(b^{+}\\) ，而 \\(p \\leq m\\) 则是来源于正则表达式中不包含 \\(a\\) 的要求，若 \\(p &gt; m\\) ，则 \\(H(L)\\) 中一定包含 \\(a\\) ，与 \\(R\\) 交完之后不可能出现这种串。 那么这个 \\(L’\\) 里面有两个限制，看上去就不是上下文无关语言，又根据上下文无关语言和正则语言的交是上下文无关语言，若 \\(H(L)\\) 是上下文无关语言，则 \\(H(L) \\cap R\\) 也一定是上下文无关语言。若能证明 \\(L’\\) 不是上下文无关语言，则 \\(H(L)\\) 就不是上下文无关语言，反例构造成立。 可以使用上下文无关语言的泵引理很方便地证明。 上下文无关语言的泵引理若 \\(L\\) 为上下文无关语言，则存在泵引理常数 \\(n\\) ，\\(\\forall z \\in L, |z| \\geq n\\) ，可以将 \\(z\\) 拆分为 \\(uvwxy\\) ，即 \\(z = uvwxy\\) ，其中 \\(|vwx| \\leq n, |vx| \\geq 1\\) ，\\(\\forall k \\in \\lbrace 0, 1, 2, \\ldots \\rbrace\\)， \\(uv^{k}wx^{k}y \\in L\\) 。 在做题的过程中，发现了一件比较有意思看上去也比较有用的事情，就是在泵引理的应用过程中，可以不妨设 \\(|u| &lt; n \\)。因为若 \\(|u| \\geq n\\) ，可以直接对 \\(u\\) （不断）应用泵引理直到 \\(|u| &lt; n\\) 。 那么对于 \\(L’\\) ，可以直接取 \\(z = b^{2n}c^{2n}d^{2n} = uvwxy \\) ，不妨设 \\(|u| &lt; n\\)，那么 \\(v, x\\) 都是一段 \\(b\\) ，设 \\(|vx| = l\\) ，取 \\(k = n\\)，则 \\(uv^kwx^ky = b^{2n + ln}c^{2n}d^{2n} \\notin L’\\) ，因此 \\(L’\\) 不是上下文无关语言。","link":"/2023/01/26/FLA22%E9%83%A8%E5%88%86%E4%BD%9C%E4%B8%9A/"},{"title":"Codeforces-Edu-Round-Notes","text":"退役老狗的 codeforces 摸鱼记。准备做做 Educational Round，一场做个五六题，试图维护一下捉襟见肘的代码能力，同时也拯救一下跌破下限的智商。 Educational Codeforces Round 144 (Rated for Div. 2)A注意到当 \\( i \\) 大于 \\(30\\) 时，产生的效果与 \\(i\\) 从 \\(1\\) 开始相同，所以原串是有循环节的。 my-impl B结论：最多使用两个 * 。 做法： 0 个 * : \\(a\\) 和 \\(b\\) 相同。 1 个 * : 答案是 x* 或是 *x 的形式，只需要考虑 \\(a\\) 和 \\(b\\) 的首字母或是尾字母是否相同。 2 个 * : 答案是 *xy* 的形式，如果答案是 x*y* 或是 *x*y 的形式，则可以等价替换为 x* 或 *y ，同理，使用 3 个或以上 * 一定不优。只需要考虑 \\(a\\) 和 \\(b\\) 中是否有两个连续字母相同。 my-impl C眼瞎了，没看到取模。 首先做这个最大\\(size\\) ，很好做，直接将 \\(l\\) 不断乘 \\(2\\) 直到超过 \\(r\\) 就可以得到最大的 \\(size\\) ，记为 \\(n\\) 。 然后考虑方案数，首先枚举一个集合中最小的数 \\(x\\) ，那么需要满足 \\(l \\leq x, x\\prod_{i = 1}^{n}d_i \\leq r, \\forall d_i \\geq 2\\)，所有 \\(d_i\\) 的取法就是方案数。 可以设计递推计算这个方案数，设 \\(f(x, n)\\) 表示集合中最小的数为 \\(1\\)、当前集合中最大的数是 \\(x\\) 、集合大小为 \\(n\\) 的方案数，转移比较简单，那么此题答案就是： \\[ \\sum{x = l}^{r}\\sum{i = 1}^{\\lfloor \\frac{r}{i} \\rfloor} f(i, n) = \\sum_{x = l}^{r} g(\\lfloor \\frac{r}{x} \\rfloor, n)\\] 上式中，\\(g(\\ , n)\\) 是 \\(f(\\ , n)\\) 的前缀和。 整除分块，时间似乎刚刚好。 Tutorial 里面似乎有数学方法可以直接把这个方案数算出来。 my-impl D贪心。 可以将题目中的操作看做将所有 \\(a_i - x\\) ，然后选择 \\(k\\) 个位置 \\(+ 2x\\) 。 套路地将区间和拆成前缀和相减的形式，考虑枚举右端点对于答案的可能贡献。接下来按照 \\(x\\) 的正负讨论，如果 \\(x &gt; 0\\) ，那么希望尽可能将 \\(k\\) 个位置放在区间内，否则尽可能放在区间外。 需要把一点点细节全部都写对，老年人为了复习线段树没有选择更快的做法。 my-impl E写半天没写出来，最后抄的题解，qaq。 还是看 Tutorial 吧。🥹 my-impl 可能需要注意的是，当 multiset 为空的时候，*s.begin() 似乎是未定义行为，会返回一个奇妙的东西？ Educational Codeforces Round 143 (Rated for Div. 2)A把两个序列拼在一起，中间切一刀，两边各自满足条件即可，暴力可过。 my-impl B考虑选择所有包含 \\(k\\) 的区间 \\(l, r\\) 。 所有不包含 \\(k\\) 的区间一定不优，而加入一个包含 \\(k\\) 的区间不会使 ideal 的点集变大，所以全部加入之后判断 \\(k\\) 是否满足 ideal 即可。暴力可过。 my-impl C对于每一个 \\(a_i\\) 在 \\(b[i: n]\\) 的区间上二分找到最后一个吃完的位置 \\(p\\) ，然后通过差分统计答案，\\([i: p - 1]\\) 的区间上每一个答案增加 \\(b_j\\) ，\\(ans_p\\) 增加剩下的价值。 时间复杂度 \\(O(n\\log n)\\)。 my-impl D因为所有 \\(w_i \\geq 0\\) ，所以价值的代数和最大等价于扔掉最少的边。 一个三角形的三个顶点只有两种涂色方法： 三个点同色，这种情况下扔掉三条边，不优。 两个点同色和最后一个点异色，这种情况下扔掉一条同色边，全部选择这种。 因此，答案中有一个因子为 \\(\\binom{\\frac{n}{3}}{\\frac{n}{6}}\\) ，上面是三角形数量，选出一半的三角形赋给两蓝一红的颜色，剩下的赋给两红一蓝的颜色。 然后对于每个三角形的边权 \\(a \\leq b \\leq c\\) 分类讨论即可，考虑到所有的三角形涂色方案独立，答案为所有因子的乘积。 my-impl E一个很贴近真实算法的题，比较喜欢。 考虑对于每一个 \\(h_i\\) 使用操作 2 能够解决全部所需的最小操作 1 的数量，很显然 \\(i\\) 这个位置是不应用操作 1 的，所以可以只考虑 \\(i\\) 的每一个前缀和后缀，方法类似。 维护一个单增的单调队列，当遇到 \\(h_i\\) 时： 将所有大于它的队尾元素出队，出队的过程中统计需要的操作 1 的数量，注意到假设队列中原有 \\([5, 6, 8]\\) 遇到 \\(4\\) ，其实会将原来的序列变成 \\([1, 2, 3, 4]\\) 的等差数列，因此将四个数压缩成一个节点放入单调队列中。 另一个限制是当遇到比较小的 \\(h_i\\) 比如 \\(2\\) 时，实际上需要将 \\(i - 1\\) 以前的数统统使用操作 1 点死，这也是队头移动的条件。 细节有一、、多 时间复杂度 \\(O(n)\\) 。 my-impl F二分答案，考虑如何检验，令 1 为根，每一个黑点都尽可能向下（更深处）移动，如果无法往下移动，则向上移动到父亲尝试检验。移动到根或两个及以上黑点交汇则失败。 时间复杂度 \\(O(n\\log n)\\) 。 my-impl Educational Codeforces Round 146 (Rated for Div. 2)A按照 \\(n\\) 和 \\(k\\) 的奇偶性分类讨论： \\(n\\) 是偶数，可以直接令 \\(y = 0\\) ，\\(x\\) 一定有解。 \\(n\\) 是奇数，若 \\(k\\) 是偶数，一定无解；否则因为 \\(k \\leq n\\) ，只要让 \\(n\\) 减去若干个 \\(2\\) 一定可以到达 \\(k\\) 。 my-impl B好题，不要把算法题当成数学题来做。 先考虑只有一维的做法，一个直观的想法是先将 \\(m\\) 增大到 \\(\\sqrt{a}\\) 左右，然后再走约 \\(\\sqrt{a}\\) 步，这样最少。 但是在两维的情况下，这个想法并不一定成立，参考 \\(a = 8, b = 4\\) 这组样例解释，一个较大的 \\(m\\) 可能会对于上面这个最小的性质带来一些破坏。 考虑当 \\(m\\) 不超过 \\(M\\) 时所需的最少步数，答案为 \\(M + \\lceil \\frac{a}{M} \\rceil + \\lceil \\frac{b}{M} \\rceil \\) ，对于那些多出来的部分，只需要在 \\(m\\) 还没增大到 \\(M\\) 的时候先走即可。 结合最开始的观察，发现当 \\(M\\) 很大的时候是无意义的，而 \\(M\\) 应该 \\(&lt; \\max(\\sqrt{a}, \\sqrt{b})\\) 。 my-impl C先考虑只有一个 \\(a\\) 的情况，很显然是把 \\(r\\) 逆序排序，直接按顺序构造最小，证明可以参考排序不等式。 那么如果有两个数组可以构造，只需要把 \\([s_1, 2s_1, \\ldots, ns_1, s_2, 2s_2, \\ldots, ns_2]\\) 排序，然后取前 \\(n\\) 项即可。 my-impl D发现答案具有单调性，即如果改变 \\(x\\) 个 \\(d_i\\) 能做到，那么改变更多个 \\(d_i\\) 也一定能做到。 于是可以二分，这边考虑二分的是最多的不改变 \\(d_i\\) 的数量。原因是：设 \\(p’\\) 表示 \\(p\\) 从小到大排序的结果，那么不改变的这些点一定是 \\(p’\\) 中的一段连续区间。 现在问题变成了有了一段连续区间 \\(p’[l: r]\\) ，如何检验外面的这些点改变 \\(d_i\\) 之后能不能满足极差 \\(\\geq k\\) 的条件，可以把区间外的这些点分成两类： 通过改变 \\(d_i\\) 能够放进 \\([p’(l), p’(r)]\\) 这个区间里面的点，这一部分点一定不会破坏目标性质 通过改变 \\(d_i\\) 不能放进这个区间里面的点，这一部分点可能会放在区间的左边或者右边，针对这一部分点的检验变成了：每一个点有放在左边或是右边两种选项，是否存在一种选法使得极差 \\(\\geq k\\) 这个条件成立。 可以枚举这些点的左边的值，同时记录他们对应的右边的值，按照从小到大的顺序枚举这些点放在左边的值，每当端点右移时，相当于要把这个点放在右边，这时只需要维护延伸出的右端点最大值即可。 我认为，最后一步这个算法还是有一定的价值的，并不是完全套路。 时间复杂度可能是 \\(O(n^2\\log^2 n)\\) ，但是不怎么满。 my-impl E有点没意思，搞了半天就是动态 dp 。 结论是：一定可以把这个链条划分成若干个 \\(2\\) 个相邻点和 \\(3\\) 个相邻点的集合。 证明可以分为两步： 如果两个置换环之间存在交叉，一定不优，可以通过把交叉互换的方式减少开销。 如果存在一个 \\(&gt; 3\\) 的置换环，那么可以通过拆分成若干个大小为 \\(2\\) 和 \\(3\\) 的置换环的组合更优。 分析到了这里，dp 呼之欲出，设 \\(f(i, 0 / 1)\\) 表示到 \\(i\\) 这个点，选 / 不选 \\(i\\) 这个点的最小价值和，初值为 \\[f(1, 0) = 0, f(1, 1) = \\infty \\] 有转移， \\[f(i, 1) = \\min(f(i - 1, 0), f(i - 1, 1)) + a_{i - 1}\\] \\[f(i, 0) = f(i - 1, 1)\\] 套上动态 dp 那一套理论，先重新定义矩阵乘法： \\[C = A \\cdot B, c(i, j) = \\min(\\sum_{k = 1}^{n}a(i, k) + b(k, j))\\] 然后把转移写成矩阵乘法的形式，寄了 hexo 为什么连矩阵乘法都打不出来，看来还需要再调教一下这个博客。qaq 最后用线段树维护矩阵即可。 my-impl 接下来准备结合 THU 的机考题，对于目前的训练情况做一些调整。","link":"/2023/03/17/Codeforces-Edu-Round-Notes/"}],"tags":[{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"}],"categories":[]}